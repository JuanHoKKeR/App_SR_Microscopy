#!/usr/bin/env python3
"""
Frontend Streamlit para aplicaci√≥n de superresoluci√≥n
Aplicaci√≥n principal con navegaci√≥n por funcionalidades
"""

import streamlit as st
import sys
from pathlib import Path

# Agregar directorio de componentes al path
sys.path.append(str(Path(__file__).parent))

# Importar configuraci√≥n base
from components.ui_config import setup_page_config, load_custom_css
from components.api_client import APIClient

# Importar p√°ginas/funcionalidades
from pages.funcionalidad_1 import funcionalidad_1_page
from pages.funcionalidad_2 import funcionalidad_2_page  
from pages.funcionalidad_3 import funcionalidad_3_page
from utils.session_state import init_session_state

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Configurar p√°gina
    setup_page_config()
    load_custom_css()
    
    # Inicializar estado de sesi√≥n
    init_session_state()
    
    # Header principal
    st.markdown('<h1 class="main-header">üî¨ Microscopy Super-Resolution</h1>', unsafe_allow_html=True)
    
    # Verificar conexi√≥n con API
    api_client = APIClient()
    if not api_client.check_connection():
        st.error("‚ùå No se puede conectar con la API. Aseg√∫rate de que el backend est√© ejecut√°ndose.")
        st.info("üîß **Instrucciones para iniciar el backend:**")
        st.code("cd backend && python main.py", language="bash")
        
        # Mostrar estado de conexi√≥n en sidebar
        with st.sidebar:
            st.markdown("### üîå Estado de Conexi√≥n")
            st.error("Backend desconectado")
        
        st.stop()
    
    # Sidebar con navegaci√≥n principal
    with st.sidebar:
        st.markdown('<h2 class="sub-header">üìã Funcionalidades</h2>', unsafe_allow_html=True)
        
        # Mostrar estado de conexi√≥n
        st.success("‚úÖ Backend conectado")
        
        # Navegaci√≥n principal
        funcionalidades = {
            "üéØ Funcionalidad 1": "Selecci√≥n de Parches y Super-Resoluci√≥n",
            "üñºÔ∏è Funcionalidad 2": "Procesamiento de Imagen Completa", 
            "üìä Funcionalidad 3": "Evaluaci√≥n y Comparaci√≥n de Modelos"
        }
        
        selected_func = st.radio(
            "Selecciona una funcionalidad:",
            list(funcionalidades.keys()),
            help="Cada funcionalidad tiene prop√≥sitos espec√≠ficos"
        )
        
        # Mostrar descripci√≥n de la funcionalidad seleccionada
        st.markdown("---")
        st.markdown("**Descripci√≥n:**")
        st.info(funcionalidades[selected_func])
        
        # Informaci√≥n de modelos disponibles
        st.markdown("---")
        show_model_status_sidebar(api_client)
    
    # Renderizar funcionalidad seleccionada
    if selected_func == "üéØ Funcionalidad 1":
        funcionalidad_1_page(api_client)
    elif selected_func == "üñºÔ∏è Funcionalidad 2":
        funcionalidad_2_page(api_client)
    elif selected_func == "üìä Funcionalidad 3":
        funcionalidad_3_page(api_client)

def show_model_status_sidebar(api_client):
    """Muestra estado resumido de modelos en sidebar"""
    available_models = api_client.get_available_models()
    
    if not available_models:
        st.error("‚ùå No se pudieron cargar modelos")
        return
    
    st.markdown("**ü§ñ Estado de Modelos:**")
    
    # Contar por arquitectura
    architectures = {}
    for model in available_models:
        arch = model["architecture"]
        if arch not in architectures:
            architectures[arch] = {"available": 0, "total": 0}
        
        architectures[arch]["total"] += 1
        if model["available"]:
            architectures[arch]["available"] += 1
    
    # Mostrar conteo por arquitectura
    for arch, stats in architectures.items():
        available = stats["available"]
        total = stats["total"]
        
        if available == total:
            icon = "‚úÖ"
        elif available > 0:
            icon = "‚ö†Ô∏è"
        else:
            icon = "‚ùå"
        
        percentage = (available/total)*100 if total > 0 else 0
        st.markdown(f"{icon} **{arch}**: {available}/{total} ({percentage:.0f}%)")
    
    # Bot√≥n para ver detalles
    if st.button("üîç Ver detalles de modelos"):
        st.session_state.show_model_details = True
    
    # Mostrar detalles si se solicita
    if st.session_state.get("show_model_details", False):
        with st.expander("üìã Detalles de modelos", expanded=True):
            for model in available_models:
                status = "‚úÖ" if model["available"] else "‚ùå"
                st.markdown(f"{status} **{model['name']}**")
                st.markdown(f"   ‚îî‚îÄ {model['input_size']}‚Üí{model['output_size']}px ({model['architecture']})")
            
            if st.button("‚ùå Cerrar detalles"):
                st.session_state.show_model_details = False
                
                
def handle_full_image_mode(api_client, available_models, architecture):
    """Maneja el modo de imagen completa"""
    st.markdown('<h2 class="sub-header">üñºÔ∏è Procesamiento de Imagen Completa</h2>', unsafe_allow_html=True)
    
    # Importar componente
    from components.full_image_processor import FullImageProcessor
    from components.results_viewer import ResultsViewer
    
    # Inicializar procesador
    full_processor = FullImageProcessor(api_client)
    results_viewer = ResultsViewer()
    
    # Secci√≥n de carga de imagen
    image_data, uploaded_file = full_processor.show_image_upload_section()
    
    if image_data is not None and uploaded_file is not None:
        # Configuraci√≥n de procesamiento
        config = full_processor.show_processing_configuration(
            image_data.shape, available_models, architecture
        )
        
        if config is not None:
            # Vista previa del procesamiento
            full_processor.show_processing_preview(config, image_data.shape)
            
            # Bot√≥n de procesamiento
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                process_button = st.button(
                    "üöÄ Procesar Imagen Completa",
                    type="primary",
                    use_container_width=True
                )
            
            # Procesar si se hace clic
            if process_button:
                result = full_processor.process_image(uploaded_file, config)
                
                if result and result.get("success"):
                    # Mostrar resultados
                    st.markdown("---")
                    results_viewer.display_full_image_results(result)
                else:
                    st.error("‚ùå Error en el procesamiento de la imagen")
    
    else:
        # Informaci√≥n sobre la funcionalidad
        show_info_box("""
        **üñºÔ∏è Procesamiento de Imagen Completa**<br><br>
        Esta funcionalidad permite procesar im√°genes completas de cualquier tama√±o usando:<br>
        ‚Ä¢ **Estrategia autom√°tica**: El sistema elige la mejor forma de procesar<br>
        ‚Ä¢ **Imagen completa**: Para im√°genes peque√±as (recomendado <1024px)<br>
        ‚Ä¢ **Divisi√≥n en parches**: Para im√°genes grandes con reconstrucci√≥n inteligente<br><br>
        **Ventajas:**<br>
        ‚Ä¢ Manejo autom√°tico de im√°genes grandes<br>
        ‚Ä¢ Reconstrucci√≥n suave sin artefactos<br>
        ‚Ä¢ M√∫ltiples estrategias seg√∫n el tama√±o<br>
        ‚Ä¢ Escalado hasta 16x con m√∫ltiples modelos
        """, "info")

if __name__ == "__main__":
    main()