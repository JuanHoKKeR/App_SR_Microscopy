#!/usr/bin/env python3
"""
Frontend Streamlit para aplicaci√≥n de superresoluci√≥n
Sistema de navegaci√≥n independiente con funcionalidades separadas
"""

import streamlit as st
import sys
from pathlib import Path

# Agregar directorio de componentes al path
sys.path.append(str(Path(__file__).parent))

from components.ui_config import setup_page_config, load_custom_css
from components.api_client import APIClient
from utils.session_state import init_session_state, get_session_state, update_session_state

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Configurar p√°gina
    setup_page_config()
    load_custom_css()
    
    # Inicializar estado de sesi√≥n
    init_session_state()
    
    # Header principal
    st.markdown('<h1 class="main-header">üî¨ Microscopy Super-Resolution</h1>', unsafe_allow_html=True)
    
    # Inicializar cliente API
    api_client = APIClient()
    
    # Verificar conexi√≥n con API
    if not api_client.check_connection():
        st.error("‚ùå No se puede conectar con la API. Aseg√∫rate de que el backend est√© ejecut√°ndose.")
        st.info("üîß **Instrucciones:**")
        st.code("cd backend && python main.py", language="bash")
        st.stop()
    
    # Obtener modelos disponibles
    available_models = api_client.get_available_models()
    if not available_models:
        st.error("‚ùå No se pudieron cargar los modelos disponibles")
        st.stop()
    
    # Sistema de navegaci√≥n principal
    st.markdown("---")
    
    # Crear tabs para las funcionalidades
    tab1, tab2, tab3 = st.tabs([
        "üéØ Funcionalidad 1: Selecci√≥n de Parches", 
        "üñºÔ∏è Funcionalidad 2: Imagen Completa", 
        "üìä Funcionalidad 3: Evaluaci√≥n Comparativa"
    ])
    
    with tab1:
        handle_functionality_1(api_client, available_models)
    
    with tab2:
        handle_functionality_2(api_client, available_models)
    
    with tab3:
        handle_functionality_3(api_client, available_models)

def show_model_status_sidebar(available_models):
    """Muestra el estado de los modelos en el sidebar"""
    with st.sidebar:
        st.markdown('<h3 class="sub-header">üìä Estado de Modelos</h3>', unsafe_allow_html=True)
        
        # Agrupar por arquitectura
        architectures = {}
        for model in available_models:
            arch = model["architecture"]
            if arch not in architectures:
                architectures[arch] = {"available": 0, "total": 0}
            
            architectures[arch]["total"] += 1
            if model["available"]:
                architectures[arch]["available"] += 1
        
        # Mostrar estado por arquitectura
        for arch, stats in architectures.items():
            available = stats["available"]
            total = stats["total"]
            
            if available == total:
                icon = "‚úÖ"
                color = "green"
            elif available > 0:
                icon = "‚ö†Ô∏è"
                color = "orange"
            else:
                icon = "‚ùå"
                color = "red"
            
            st.markdown(f"{icon} **{arch}**: {available}/{total} modelos")
        
        # Mostrar detalles expandibles
        with st.expander("Ver detalles de modelos"):
            for model in available_models:
                status = "‚úÖ" if model["available"] else "‚ùå"
                st.markdown(f"{status} {model['name']} ({model['input_size']}‚Üí{model['output_size']})")

def handle_functionality_1(api_client, available_models):
    """Maneja la Funcionalidad 1: Selecci√≥n de Parches"""
    st.markdown('<h2 class="sub-header">üéØ Selecci√≥n de Parches y Super-Resoluci√≥n</h2>', unsafe_allow_html=True)
    
    st.markdown("""
    **Instrucciones:**
    1. Sube una imagen de microscop√≠a
    2. Selecciona un parche dibujando un rect√°ngulo
    3. Elige la arquitectura y factor de escala deseado
    4. Visualiza el resultado con m√©tricas de calidad
    """)
    
    # Mostrar estado de modelos en sidebar
    show_model_status_sidebar(available_models)
    
    # Subida de archivo
    uploaded_file = st.file_uploader(
        "üìÅ Selecciona una imagen de microscop√≠a:",
        type=['png', 'jpg', 'jpeg', 'tiff', 'bmp'],
        help="Formatos soportados: PNG, JPG, JPEG, TIFF, BMP",
        key="func1_upload"
    )
    
    if uploaded_file is not None:
        from components.patch_selector import PatchSelector
        from components.image_processor import ImageProcessor
        from components.results_viewer import ResultsViewer
        
        # Inicializar componentes
        patch_selector = PatchSelector(api_client)
        image_processor = ImageProcessor(api_client)
        results_viewer = ResultsViewer()
        
        # Cargar y mostrar imagen
        image = patch_selector.load_and_display_image(uploaded_file)
        
        if image is not None:
            # Layout principal
            col_canvas, col_config = st.columns([2, 1])
            
            with col_config:
                st.markdown('<h3 class="sub-header">‚öôÔ∏è Configuraci√≥n</h3>', unsafe_allow_html=True)
                
                # Selecci√≥n de arquitectura
                architectures = list(set([model["architecture"] for model in available_models if model["available"]]))
                if not architectures:
                    st.error("No hay modelos disponibles")
                    return
                
                architecture = st.selectbox(
                    "üèóÔ∏è Arquitectura:",
                    architectures,
                    help="Selecciona la arquitectura de red neuronal",
                    key="func1_arch"
                )
                
                # Configuraci√≥n de factor de escala
                config = patch_selector.show_scale_configuration(available_models, architecture)
                
                if config is None:
                    return
                
                # Opciones avanzadas
                with st.expander("üî¨ Opciones Avanzadas"):
                    # Verificar estado de KimiaNet
                    kimianet_status = api_client.get_kimianet_status()
                    kimianet_available = kimianet_status and kimianet_status.get("available", False)
                    
                    if kimianet_available:
                        st.success("‚úÖ KimiaNet disponible para evaluaci√≥n perceptual")
                        evaluate_quality = st.checkbox(
                            "üß† Evaluar calidad con KimiaNet",
                            value=True,
                            help="Calcula PSNR, SSIM e √≠ndice perceptual usando KimiaNet",
                            key="func1_quality"
                        )
                    else:
                        st.warning("‚ö†Ô∏è KimiaNet no disponible - solo PSNR/SSIM")
                        evaluate_quality = st.checkbox(
                            "üìä Evaluar calidad b√°sica",
                            value=True,
                            help="Calcula PSNR y SSIM (KimiaNet no disponible)",
                            key="func1_quality_basic"
                        )
                
                # Bot√≥n de procesamiento
                process_button = st.button("üöÄ Procesar Parche", type="primary", key="func1_process")
            
            with col_canvas:
                st.markdown('<h3 class="sub-header">üéØ Selecci√≥n de Parche</h3>', unsafe_allow_html=True)
                
                # Canvas interactivo
                canvas_result = patch_selector.show_interactive_canvas(image, config["patch_size"])
                
                # Procesar si hay selecci√≥n y se hace clic
                if canvas_result and process_button:
                    selection = patch_selector.extract_selection_coordinates(canvas_result, image, config["patch_size"])
                    
                    if selection:
                        # Procesar con upsampling por escala
                        with st.spinner("üîÑ Procesando parche..."):
                            result = image_processor.process_by_scale(
                                uploaded_file, 
                                selection, 
                                config,
                                evaluate_quality=config.get("evaluate_quality", evaluate_quality)
                            )
                            
                            if result:
                                # Mostrar resultados
                                st.markdown("---")
                                results_viewer.display_scale_results(result)

def handle_functionality_2(api_client, available_models):
    """Maneja la Funcionalidad 2: Imagen Completa"""
    st.markdown('<h2 class="sub-header">üñºÔ∏è Procesamiento de Imagen Completa</h2>', unsafe_allow_html=True)
    
    st.info("üöß **Funcionalidad en desarrollo**")
    st.markdown("""
    Esta funcionalidad incluir√°:
    - Procesamiento autom√°tico por parches
    - Estrategias de divisi√≥n inteligente  
    - Manejo de overlap para evitar artefactos
    - Procesamiento en lotes
    - Selecci√≥n autom√°tica de la mejor estrategia
    """)
    
    # Mostrar estado de modelos en sidebar
    show_model_status_sidebar(available_models)
    
    # Panel de configuraci√≥n placeholder
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Configuraci√≥n:**")
        target_resolution = st.selectbox(
            "Resoluci√≥n objetivo:",
            ["2048x2048", "4096x4096", "8192x8192"],
            help="Selecciona la resoluci√≥n final deseada",
            key="func2_resolution"
        )
        
        processing_strategy = st.radio(
            "Estrategia de procesamiento:",
            ["Autom√°tica (recomendada)", "Manual"],
            help="Autom√°tica: el sistema elige la mejor ruta",
            key="func2_strategy"
        )
    
    with col2:
        st.markdown("**Estado:**")
        st.markdown("- üöß Divisi√≥n autom√°tica por parches")
        st.markdown("- üöß Manejo de overlapping")
        st.markdown("- üöß Reconstrucci√≥n inteligente")
        st.markdown("- ‚úÖ M√∫ltiples arquitecturas disponibles")
        
        if st.button("üöÄ Procesar Imagen Completa", type="primary", key="func2_process"):
            st.warning("‚è≥ Funcionalidad pr√≥ximamente disponible")

def handle_functionality_3(api_client, available_models):
    """Maneja la Funcionalidad 3: Evaluaci√≥n Comparativa"""
    st.markdown('<h2 class="sub-header">üìä Evaluaci√≥n Comparativa de Modelos</h2>', unsafe_allow_html=True)
    
    st.markdown("""
    **M√©tricas disponibles:**
    - üìà **PSNR** (Peak Signal-to-Noise Ratio)
    - üîç **SSIM** (Structural Similarity Index)
    - üß† **√çndice Perceptual KimiaNet** (especializado en histopatolog√≠a)
    - üìä **MSE** (Mean Squared Error)
    - üé® **Evaluaci√≥n Cualitativa** (mapas de diferencias)
    """)
    
    # Mostrar estado de modelos en sidebar
    show_model_status_sidebar(available_models)
    
    # Configuraci√≥n de evaluaci√≥n
    eval_mode = st.radio(
        "Modo de evaluaci√≥n:",
        ["üìù Evaluar resultado √∫nico", "‚öñÔ∏è Comparar m√∫ltiples arquitecturas"],
        key="func3_mode"
    )
    
    if eval_mode == "üìù Evaluar resultado √∫nico":
        handle_single_evaluation(api_client)
    else:
        handle_comparative_evaluation(api_client, available_models)

def handle_single_evaluation(api_client):
    """Maneja evaluaci√≥n de un solo resultado"""
    st.markdown("### üìù Evaluaci√≥n de Resultado √önico")
    
    col1, col2 = st.columns(2)
    
    with col1:
        original_file = st.file_uploader(
            "üìÅ Imagen Original (Baja Resoluci√≥n):",
            type=['png', 'jpg', 'jpeg', 'tiff', 'bmp'],
            key="func3_original"
        )
    
    with col2:
        enhanced_file = st.file_uploader(
            "üìÅ Imagen Mejorada (Alta Resoluci√≥n):",
            type=['png', 'jpg', 'jpeg', 'tiff', 'bmp'],
            key="func3_enhanced"
        )
    
    if original_file and enhanced_file:
        # Opciones de evaluaci√≥n
        with st.expander("‚öôÔ∏è Opciones de Evaluaci√≥n"):
            calculate_perceptual = st.checkbox(
                "üß† Calcular √≠ndice perceptual (KimiaNet)",
                value=True,
                help="M√°s lento pero m√°s preciso para histopatolog√≠a"
            )
            
            show_difference_map = st.checkbox(
                "üé® Mostrar mapa de diferencias",
                value=True,
                help="Visualizaci√≥n cualitativa de diferencias"
            )
        
        if st.button("üìä Evaluar Calidad", type="primary", key="func3_eval_single"):
            with st.spinner("üîÑ Evaluando calidad..."):
                result = api_client.evaluate_image_quality(
                    original_file, 
                    enhanced_file,
                    calculate_perceptual=calculate_perceptual
                )
                
                if result:
                    from components.results_viewer import ResultsViewer
                    results_viewer = ResultsViewer()
                    results_viewer.display_evaluation_results(result, show_difference_map)

def handle_comparative_evaluation(api_client, available_models):
    """Maneja evaluaci√≥n comparativa entre m√∫ltiples arquitecturas"""
    st.markdown("### ‚öñÔ∏è Comparaci√≥n de M√∫ltiples Arquitecturas")
    st.info("üöß **Funcionalidad en desarrollo**")
    
    st.markdown("""
    Esta funcionalidad permitir√°:
    - Procesar la misma imagen con m√∫ltiples arquitecturas
    - Comparar m√©tricas lado a lado
    - Generar reportes comparativos
    - An√°lisis estad√≠stico de rendimiento
    """)

if __name__ == "__main__":
    main()